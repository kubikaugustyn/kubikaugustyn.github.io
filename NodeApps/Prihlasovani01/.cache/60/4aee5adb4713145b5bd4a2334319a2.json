{"id":"UASY","dependencies":[{"name":"C:\\Users\\Radek Augustyn\\Desktop\\Kubik\\MujWeb\\NodeApps\\Prihlasovani01\\package.json","includedInParent":true,"mtime":1579542626254},{"name":"C:\\Users\\Radek Augustyn\\Desktop\\Kubik\\MujWeb\\NodeApps\\Prihlasovani01\\node_modules\\mongoose\\package.json","includedInParent":true,"mtime":1579334330931},{"name":"assert","loc":{"line":3,"column":23},"parent":"C:\\Users\\Radek Augustyn\\Desktop\\Kubik\\MujWeb\\NodeApps\\Prihlasovani01\\node_modules\\mongoose\\lib\\cast\\number.js","resolved":"C:\\Users\\Radek Augustyn\\Desktop\\Kubik\\MujWeb\\NodeApps\\Prihlasovani01\\node_modules\\assert\\assert.js"}],"generated":{"js":"\"use strict\";const r=require(\"assert\");module.exports=function(e){return r.ok(!isNaN(e)),null==e?e:\"\"===e?null:(\"string\"!=typeof e&&\"boolean\"!=typeof e||(e=Number(e)),r.ok(!isNaN(e)),e instanceof Number?e.valueOf():\"number\"==typeof e?e:Array.isArray(e)||\"function\"!=typeof e.valueOf?e.toString&&!Array.isArray(e)&&e.toString()==Number(e)?Number(e):void r.ok(!1):Number(e.valueOf()))};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"assert","original":{"line":3,"column":6},"generated":{"line":1,"column":19}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"require","original":{"line":3,"column":15},"generated":{"line":1,"column":21}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":3,"column":23},"generated":{"line":1,"column":29}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"module","original":{"line":16,"column":0},"generated":{"line":1,"column":39}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"exports","original":{"line":16,"column":7},"generated":{"line":1,"column":46}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":16,"column":17},"generated":{"line":1,"column":54}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":16,"column":37},"generated":{"line":1,"column":63}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":19,"column":6},"generated":{"line":1,"column":66}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"assert","original":{"line":17,"column":2},"generated":{"line":1,"column":73}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"ok","original":{"line":17,"column":9},"generated":{"line":1,"column":75}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"isNaN","original":{"line":17,"column":13},"generated":{"line":1,"column":79}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":17,"column":19},"generated":{"line":1,"column":85}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":19,"column":13},"generated":{"line":1,"column":89}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":19,"column":6},"generated":{"line":1,"column":95}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":20,"column":11},"generated":{"line":1,"column":97}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":22,"column":14},"generated":{"line":1,"column":99}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":22,"column":6},"generated":{"line":1,"column":104}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":23,"column":11},"generated":{"line":1,"column":106}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":26,"column":21},"generated":{"line":1,"column":112}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":26,"column":13},"generated":{"line":1,"column":129}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":26,"column":48},"generated":{"line":1,"column":132}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":26,"column":40},"generated":{"line":1,"column":150}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":27,"column":4},"generated":{"line":1,"column":154}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Number","original":{"line":27,"column":10},"generated":{"line":1,"column":156}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":27,"column":17},"generated":{"line":1,"column":163}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"assert","original":{"line":30,"column":2},"generated":{"line":1,"column":167}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"ok","original":{"line":30,"column":9},"generated":{"line":1,"column":169}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"isNaN","original":{"line":30,"column":13},"generated":{"line":1,"column":173}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":30,"column":19},"generated":{"line":1,"column":179}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":31,"column":6},"generated":{"line":1,"column":183}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Number","original":{"line":31,"column":21},"generated":{"line":1,"column":196}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":32,"column":11},"generated":{"line":1,"column":203}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"valueOf","original":{"line":32,"column":15},"generated":{"line":1,"column":205}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":34,"column":21},"generated":{"line":1,"column":215}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":34,"column":13},"generated":{"line":1,"column":232}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":35,"column":11},"generated":{"line":1,"column":234}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Array","original":{"line":37,"column":7},"generated":{"line":1,"column":236}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"isArray","original":{"line":37,"column":13},"generated":{"line":1,"column":242}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":37,"column":21},"generated":{"line":1,"column":250}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":37,"column":52},"generated":{"line":1,"column":254}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":37,"column":36},"generated":{"line":1,"column":273}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"valueOf","original":{"line":37,"column":40},"generated":{"line":1,"column":275}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":40,"column":6},"generated":{"line":1,"column":283}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"toString","original":{"line":40,"column":10},"generated":{"line":1,"column":285}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Array","original":{"line":40,"column":23},"generated":{"line":1,"column":296}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"isArray","original":{"line":40,"column":29},"generated":{"line":1,"column":302}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":40,"column":37},"generated":{"line":1,"column":310}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":40,"column":45},"generated":{"line":1,"column":314}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"toString","original":{"line":40,"column":49},"generated":{"line":1,"column":316}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Number","original":{"line":40,"column":63},"generated":{"line":1,"column":328}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":40,"column":70},"generated":{"line":1,"column":335}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Number","original":{"line":41,"column":11},"generated":{"line":1,"column":338}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":41,"column":18},"generated":{"line":1,"column":345}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"assert","original":{"line":44,"column":2},"generated":{"line":1,"column":353}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"ok","original":{"line":44,"column":9},"generated":{"line":1,"column":355}},{"source":"node_modules/mongoose/lib/cast/number.js","original":{"line":44,"column":12},"generated":{"line":1,"column":359}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"Number","original":{"line":38,"column":11},"generated":{"line":1,"column":362}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"val","original":{"line":38,"column":18},"generated":{"line":1,"column":369}},{"source":"node_modules/mongoose/lib/cast/number.js","name":"valueOf","original":{"line":38,"column":22},"generated":{"line":1,"column":371}}],"sources":{"node_modules/mongoose/lib/cast/number.js":"'use strict';\n\nconst assert = require('assert');\n\n/*!\n * Given a value, cast it to a number, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {Error} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castNumber(val) {\n  assert.ok(!isNaN(val));\n\n  if (val == null) {\n    return val;\n  }\n  if (val === '') {\n    return null;\n  }\n\n  if (typeof val === 'string' || typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  assert.ok(!isNaN(val));\n  if (val instanceof Number) {\n    return val.valueOf();\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  if (!Array.isArray(val) && typeof val.valueOf === 'function') {\n    return Number(val.valueOf());\n  }\n  if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n    return Number(val);\n  }\n\n  assert.ok(false);\n};\n"},"lineCount":null}},"error":null,"hash":"931d1fd5134392110a899ce82580da2d","cacheData":{"env":{}}}