/**
 * HttpConnector.js
 * Library of methods for data transfers between server and client via HTTP protocol.
 * Library is extending methods of AmfConnector.js
 * All rights reserved, decko.ceskatelevize.cz, 2014
 * @author Tomas Kozak, tomas.kozak@kan-pai.net
 */
var HttpConnector = {
    VERSION: "1.0.0",
    gatewayUrl: "",
    token: "",
    init: function(a, b) {
        this.gatewayUrl = a, this.token = b
    },
    loadAppStateMediaPost: function(a, b, c, d, e) {
        var f = this.gatewayUrl + "AppState/getStateMedia",
            g = {
                token: String(this.token),
                slotNumber: Number(a),
                resourceName: String(b),
                contentType: String(c),
                attachment: Boolean(d),
                filename: String(e)
            };
        DP.sendAjaxRequest({
            url: f,
            data: g,
            onSuccess: function(a, b, c) {
                "success" === c && (console.log("OK"), document.location = a)
            },
            onError: function() {
                console.log("Error")
            },
            onBefore: function() {},
            onComplete: function() {},
            onTimeout: function() {
                console.log("Error - timeout")
            }
        })
    },
    loadAppStateMediaGet: function(a, b, c, d, e) {
        var f = this.gatewayUrl + "AppState/getStateMedia",
            g = "?token=" + encodeURIComponent(this.token) + "&slotNumber=" + a + "&resourceName=" + encodeURIComponent(b) + "&contentType=" + encodeURIComponent(c) + "&attachment=" + d + "&filename=" + encodeURIComponent(e);
        return f + g
    }
};
AmfConnector.ErrorResult = function(a) {
    var b = {};
    return b.status = "ERROR", b.error = "amf status error", b.errorObject = a, b
}, AmfConnector.GetAppConfigResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "invalid token") : (b.status = "OK", b.config = Object(a[0])), b
}, AmfConnector.GetAppStatesResult = function(a) {
    var b = {};
    if ("ERROR" == a[0].status) b.status = "ERROR", b.error = "invalid token";
    else {
        b.status = "OK", b.slots = [];
        for (var c = 0; c < a[0].slots.length; c++) {
            var d = {
                slotNumber: Number(a[0].slots[c].slotNumber),
                metadata: String(a[0].slots[c].metadata)
            };
            b.slots.push(d)
        }
    }
    return b
}, AmfConnector.GetDateResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "invalid token") : (b.status = "OK", b.date = new Date(a[0].now)), b
}, AmfConnector.GetRankingResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "invalid token") : (b.status = "OK", b.playerBest = a[0].myBestScore, b.topList = a[0].top), b
}, AmfConnector.GetTokenStatusResult = function(a) {
    var b = {};
    return "dead" == a[0].tokenStatus ? (b.status = "ERROR", b.error = "invalid token") : b.status = "OK", b
}, AmfConnector.KillTokenResult = function(a) {
    var b = {};
    return "noaction" == a[0].tokenStatus ? (b.status = "ERROR", b.error = "invalid token") : b.status = "OK", b
}, AmfConnector.LoadAppStateResult = function(a, b) {
    function c(a) {
        return decodeURIComponent(escape(e(a)))
    }

    function d(a) {
        var b = e(a),
            c = btoa(b);
        return "data:image/png;base64," + c
    }

    function e(a) {
        for (var b = "", c = 0; c < a.length; c++) b += String.fromCharCode(a[c]);
        return b
    }
    var f = {};
    if ("ERROR" == a[0].status) f.status = "ERROR", f.error = "wrong resource name, or invalid token";
    else switch (f.status = "OK", f.resourceType = b, b) {
        case "text":
            f.state = c(a[0].state);
            break;
        case "image":
            f.image = d(a[0].state)
    }
    return f
}, AmfConnector.RemoveAppStateResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "slot does not exist, or invalid token") : (b.status = "OK", b.date = new Date(a[0].now)), b
}, AmfConnector.SaveAppStateResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "invalid token") : b.status = "OK", b
}, AmfConnector.SaveRankResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "slot does not exist, or invalid token") : (b.status = "OK", b.credits = Number(a[0].credit)), b
}, AmfConnector.SendMessageResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "wrong message UUID, format, parameters, or invalid token") : (b.status = "OK", b.code = String(a[0].code), b.subcode = String(a[0].subcode), b.message = String(a[0].message), b.detail = String(a[0].detail)), b
}, AmfConnector.UpdateProfileResult = function(a) {
    var b = {};
    return "ERROR" == a[0].status ? (b.status = "ERROR", b.error = "invalid token") : b.status = "OK", b
};
