/**
 * Decko - JS Sound Library
 *
 * @version 1.0.2 - 75
 * @author JoseDu Josef.Duda@ceskatelevize.cz
 */
var DeSnd = DeSnd || {
    MODE_WEB: "WebAudio",
    MODE_TAG: "AudioTag",
    SND_LOADING: "loading",
    SND_READY: "ready",
    SND_ERROR: "error",
    SND_PLAYING: "playing",
    SND_PAUSED: "paused",
    SND_COMPLETE: "complete",
    E_LOAD_PROGRESS: "progress",
    E_LOAD_COMPLETE: "complete",
    E_SND_READY: "ready",
    E_SND_ERROR: "error",
    E_SND_PLAY: "play",
    E_SND_STOP: "stop",
    E_SND_PAUSE: "pause",
    E_SND_COMPLETE: "complete",
    E_SND_MUTE: "mute",
    E_SND_VOLUME: "volume",
    E_SND_SEEK: "seek",
    E_SND_STATE: "stateChange"
};
DeSnd.SoundManager = function() {
    this.context = null, this.audioMode = "", this.supportedType = ".mp3", this.noAudio = !1, this._sounds = [], this._groups = {}, this._muted = !1, this._muteVolume = 0, this._masterVolume = 1, this.fadeDuration = 200, this.masterGain = null, this.loader = null, this.logger = null, this.tagCache = null, this.init()
}, DeSnd.SoundManager.prototype.init = function() {
    this.varsSetup(), this.loader = new DeSnd.Loader(this), this.logger = new DeSnd.Logger, this.tagCache = new DeSnd.TagCache
}, DeSnd.SoundManager.prototype.varsSetup = function() {
    var a = document.createElement("audio");
    if (a && a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, "") && (this.supportedType = ".ogg"), this.context = this._getAudioContext(), this.context || (this.audioMode = DeSnd.MODE_TAG), -1 === window.location.href.indexOf("decko-test.") && -1 === window.location.href.indexOf("decko.") && -1 === window.location.href.indexOf("decko-projekty.") && -1 === window.location.href.indexOf("ceskatelevize.") && -1 === window.location.href.indexOf("localhost") && (this.context = null, this.audioMode = DeSnd.MODE_TAG), this.context) this.audioMode = DeSnd.MODE_WEB, this.masterGain = this.context.createGain(), this.masterGain.gain.setValueAtTime(1, this.context.currentTime), this.masterGain.connect(this.context.destination);
    else if (void 0 === window.Audio) return this.noAudio = !0, void this.logger.showLog("Library is disabled - No audio support", 0);
    this.context && "suspended" === this.context.state && this._initContextResume(), /iPad|iPhone|iPod/.test(navigator.platform) && (this.context ? new DeSnd.AudioUnlock(this.context) : new DeSnd.AudioUnlock(this._getAudioContext()))
}, DeSnd.SoundManager.prototype._getAudioContext = function() {
    var a;
    if (window.AudioContext) try {
        a = new window.AudioContext
    } catch (b) {
        a = null
    } else if (window.webkitAudioContext) try {
        a = new window.webkitAudioContext
    } catch (b) {
        a = null
    }
    return a
}, DeSnd.SoundManager.prototype._initContextResume = function() {
    var a = this,
        b = function() {
            a.context.resume(), document.removeEventListener("touchstart", b), document.removeEventListener("mousedown", b)
        };
    document.addEventListener("touchstart", b), document.addEventListener("mousedown", b)
}, DeSnd.SoundManager.prototype.stopAll = function() {
    for (var a = 0; a < this._sounds.length; a++) this._sounds[a].stop()
}, DeSnd.SoundManager.prototype.destroyAll = function() {
    for (; this._sounds.length > 0;) this._sounds.pop().destroy();
    this._groups = {}
}, DeSnd.SoundManager.prototype.destroy = function(a) {
    for (var b = this._sounds.length - 1; b >= 0; b--) this._sounds[b].key === a && this._sounds[b].destroy();
    this.loader.destroySnd(a)
}, DeSnd.SoundManager.prototype.removeSound = function(a) {
    var b = this._sounds.indexOf(a); - 1 !== b && this._sounds.splice(b, 1)
}, DeSnd.SoundManager.prototype.destroyCache = function() {
    this.destroyAll(), this.loader.destroySndCache()
}, DeSnd.SoundManager.prototype.pauseAll = function() {
    for (var a = 0; a < this._sounds.length; a++) this._sounds[a].state === DeSnd.SND_PLAYING && this._sounds[a].pause()
}, DeSnd.SoundManager.prototype.resumeAll = function() {
    for (var a = 0; a < this._sounds.length; a++) this._sounds[a].state === DeSnd.SND_PAUSED && this._sounds[a].play()
}, DeSnd.SoundManager.prototype.play = function(a, b) {
    var c = this.add(a, b);
    return c && c.play(), c
}, DeSnd.SoundManager.prototype.add = function(a, b) {
    var c = null;
    if (this.loader.checkKey(a)) {
        var c = new DeSnd.Sound(this, a, b);
        this._sounds.push(c)
    }
    return c
}, DeSnd.SoundManager.prototype.addSound = function(a, b, c) {
    return this.loader.checkKey(a) || this.loader.load([{
        id: a,
        src: b
    }]), this.add(a, c)
}, DeSnd.SoundManager.prototype.group = function(a) {
    return a = String(a), this._groups[a] ? this._groups[a] : (this.logger.showLog("Group not found Id: " + a, 0), new DeSnd.SndGroup)
}, DeSnd.SoundManager.prototype._doMute = function(a) {
    if (a)
        if (this.audioMode === DeSnd.MODE_WEB) this._muteVolume = this.masterGain.gain.value, this.masterGain.gain.setValueAtTime(0, this.context.currentTime);
        else
            for (var b = 0; b < this._sounds.length; b++) this._sounds[b].mute = !0;
    else if (this.audioMode === DeSnd.MODE_WEB) this.masterGain.gain.setValueAtTime(this._muteVolume, this.context.currentTime);
    else
        for (var c = 0; c < this._sounds.length; c++) this._sounds[c].mute = !1
}, Object.defineProperty(DeSnd.SoundManager.prototype, "mute", {
    get: function() {
        return this._muted
    },
    set: function(a) {
        a = a || !1, this._muted !== a && (this._muted = a, this._doMute(this._muted))
    }
}), Object.defineProperty(DeSnd.SoundManager.prototype, "volume", {
    get: function() {
        return this._masterVolume
    },
    set: function(a) {
        if (a < 0 ? a = 0 : a > 10 && (a = 10), this._masterVolume !== a)
            if (this._masterVolume = a, this.audioMode === DeSnd.MODE_WEB) this.masterGain.gain.setValueAtTime(a, this.context.currentTime);
            else
                for (var b = 0; b < this._sounds.length; b++) this._sounds[b].volume = this._sounds[b].volume
    }
}), DeSnd.Fader = function(a) {
    this.MAIN_STEP_TIME = 20, this._refObject = a, this._fadeTimer = null, this._actualValue = 0, this._toValue = 0, this._completeCall = null, this._completeRef = null, this._steps = 0, this._stepTime = 0, this._stepValue = 0
}, DeSnd.Fader.prototype.fade = function(a, b, c, d, e) {
    var f = this;
    this._completeCall = d || null, this._completeRef = e || null, this._fadeKill(), this._actualValue = a, this._toValue = b, this._refObject.volume = a, this._steps = Math.round(c / this.MAIN_STEP_TIME), this._steps < 1 && (this._steps = 1), this._stepTime = Math.round(c / this._steps), this._stepValue = (b - a) / this._steps, this._fadeTimer = setInterval(function() {
        f._fadeStep()
    }, this._stepTime)
}, DeSnd.Fader.prototype._fadeKill = function() {
    this._fadeTimer && clearInterval(this._fadeTimer)
}, DeSnd.Fader.prototype._fadeStep = function() {
    this._steps--, 0 === this._steps ? (this._actualValue = this._toValue, this._updateVolume(), this._fadeKill(), this._fadeEnd()) : (this._actualValue += this._stepValue, this._updateVolume())
}, DeSnd.Fader.prototype._updateVolume = function() {
    this._refObject.volume = this._actualValue
}, DeSnd.Fader.prototype._fadeEnd = function() {
    this._completeCall && this._completeCall.call(this._completeRef)
}, DeSnd.Fader.prototype.destroy = function() {
    this._fadeKill()
}, DeSnd.AudioUnlock = function(a) {
    this._context = a, this._init()
}, DeSnd.AudioUnlock.prototype._init = function() {
    var a = this,
        b = function() {
            a._unlock(), document.removeEventListener("touchstart", b)
        };
    document.addEventListener("touchstart", b)
}, DeSnd.AudioUnlock.prototype._unlock = function() {
    if (this._context) {
        var a = this._context.createBuffer(1, 1, 22050),
            b = this._context.createBufferSource();
        b.buffer = a, b.connect(this._context.destination), void 0 === b.start ? b.noteOn(0) : b.start(0), setTimeout(function() {
            b.playbackState !== b.PLAYING_STATE && b.playbackState !== b.FINISHED_STATE || console.log("iOs Sounds Unlocked")
        }, 100)
    }
}, DeSnd.Loader = function(a) {
    this._mngRef = a, this._cache = {}, this._checkRes = !1, this._loaded = 0, this._total = 0, this._tagTotal = 0, this._callbacks = {}, this._init()
}, DeSnd.Loader.prototype._init = function() {}, DeSnd.Loader.prototype.load = function(a) {
    if (this._mngRef.noAudio) this.loadingDone();
    else
        for (var b = 0; b < a.length; b++) this._cache[a[b].id] ? this._mngRef.logger.showLog("File loading skipped (already exist) - ID: " + a[b].id, 0) : (this._total++, this.loadSnd(a[b], this.loadSndComplete))
}, DeSnd.Loader.prototype.loadSndComplete = function(a) {
    this._loaded++, this.dispatchEvent(DeSnd.E_LOAD_PROGRESS), this._loaded === this._total && this.loadingDone()
}, DeSnd.Loader.prototype.loadingDone = function() {
    this.dispatchEvent(DeSnd.E_LOAD_COMPLETE)
}, DeSnd.Loader.prototype.loadSnd = function(a, b) {
    this._cache[a.id] = {
        src: a.src,
        data: null,
        waitList: []
    }, a.settings && (this._cache[a.id].initProps = a.settings), this._mngRef.audioMode === DeSnd.MODE_WEB ? this.loadSndWeb(a, b) : this.loadSndTag(a, b)
}, DeSnd.Loader.prototype.loadSndWeb = function(a, b) {
    var c = this,
        d = new XMLHttpRequest;
    d.open("GET", a.src + c._mngRef.supportedType, !0), d.responseType = "arraybuffer", d.onload = function() {
        c._mngRef.context.decodeAudioData(d.response, function(d) {
            c.loadFileComplete(a.id, d), b.call(c, a.id)
        }, function() {
            c.loadFileError(a.id), b.call(c)
        })
    }, d.onerror = function() {
        c.loadFileError(a.id), b.call(c)
    }, d.send()
}, DeSnd.Loader.prototype.loadSndTag = function(a, b) {
    var c = this,
        d = new Audio;
    d.name = a.id, this._tagTotal++, a.isComplete = !1, a.try = 1;
    var e = function() {
            d.removeEventListener("canplay", f, !1), d.removeEventListener("canplaythrough", f, !1), d.removeEventListener("error", g, !1), clearInterval(a.completeCheck)
        },
        f = function() {
            a.isComplete || (a.isComplete = !0, e.call(), c._mngRef.tagCache.addItem(d), c.loadFileComplete(a.id, d.src), b.call(c, a.id))
        },
        g = function(f) {
            (f.type = c._tagTotal > 30 && 1 === a.try) ? (c._mngRef.tagCache.destroyCache(), a.try = 0, d.load(), c._mngRef.logger.showLog("Probably reached cache limit, trying re-load: " + d.src, 0)) : (e.call(), c.loadFileError(a.id), b.call(c))
        };
    d.src = a.src + c._mngRef.supportedType, d.addEventListener("canplay", f, !1), d.addEventListener("canplaythrough", f, !1), d.addEventListener("error", g, !1), a.completeCheck = setInterval(function() {
        d.readyState > 3 && f.call()
    }, 200), d.readyState > 3 ? f.call() : (d.preload = "auto", d.load())
}, DeSnd.Loader.prototype.loadFileComplete = function(a, b) {
    for (this._cache[a].data = b; this._cache[a].waitList.length > 0;) this._cache[a].waitList.pop().state = DeSnd.SND_READY
}, DeSnd.Loader.prototype.loadFileError = function(a) {
    for (this._mngRef.logger.showLog("File load error: " + a, 0); this._cache[a].waitList.length > 0;) this._cache[a].waitList.pop().state = DeSnd.SND_ERROR
}, DeSnd.Loader.prototype.checkKey = function(a) {
    return this._checkRes = !1, this._cache[a] && (this._checkRes = !0), this._checkRes
}, DeSnd.Loader.prototype.getSnd = function(a) {
    return this._cache[a]
}, DeSnd.Loader.prototype.destroySnd = function(a) {
    this._cache[a] = null
}, DeSnd.Loader.prototype.destroySndCache = function() {
    this._cache = {}
}, DeSnd.Loader.prototype.dispatchEvent = function(a) {
    if (this._callbacks[a] && this._callbacks[a].length > 0) {
        var b = {};
        switch (a) {
            case DeSnd.E_LOAD_PROGRESS:
                b.progress = this._loaded / this._total
        }
        for (var c = this._callbacks[a].length - 1; c >= 0; c--) this._callbacks[a][c].cFc.call(this._callbacks[a][c].cSc, b), this._callbacks[a][c] && this._callbacks[a][c].onc && this._callbacks[a].splice(c, 1)
    }
}, DeSnd.Loader.prototype.once = function(a, b, c) {
    this.on(a, b, c, !0)
}, DeSnd.Loader.prototype.on = function(a, b, c, d) {
    this._callbacks[a] || (this._callbacks[a] = []), this._callbacks[a].push({
        cFc: b,
        cSc: c || this,
        onc: d || !1
    })
}, DeSnd.Loader.prototype.off = function(a, b) {
    if (this._callbacks[a] && this._callbacks[a].length > 0)
        if (b)
            for (var c = this._callbacks[a].length - 1; c >= 0; c--) this._callbacks[a][c].cFc === b && this._callbacks[a].splice(c, 1);
        else this._callbacks[a] = []
}, DeSnd.Logger = function() {
    this.PREF = "%c DeSound: ", this.SUF = " ", this.CLR_WARNING = "fc9a24", this.CLR_ERROR = "fc4824", this.actualClr = ""
}, DeSnd.Logger.prototype.showLog = function(a, b) {
    switch (b) {
        case 0:
            this.actualClr = this.CLR_WARNING;
            break;
        case 1:
            this.actualClr = this.CLR_ERROR
    }
    console.log(this.PREF + a + this.SUF, "background: #" + this.actualClr)
}, DeSnd.SndGroup = function() {
    this.sndArr = [], this._volume = 1, this._mute = !1, this._muteVolume = 0, this._fader = new DeSnd.Fader(this), this._init()
}, DeSnd.SndGroup.prototype._init = function() {}, DeSnd.SndGroup.prototype.fade = function(a, b, c) {
    this._fader.fade(a, b, c)
}, DeSnd.SndGroup.prototype.stopAll = function() {
    for (var a = 0; a < this.sndArr.length; a++) this.sndArr[a].stop()
}, DeSnd.SndGroup.prototype.pauseAll = function() {
    for (var a = 0; a < this.sndArr.length; a++) this.sndArr[a].state === DeSnd.SND_PLAYING && this.sndArr[a].pause()
}, DeSnd.SndGroup.prototype.resumeAll = function() {
    for (var a = 0; a < this.sndArr.length; a++) this.sndArr[a].state === DeSnd.SND_PAUSED && this.sndArr[a].play()
}, DeSnd.SndGroup.prototype.destroyAll = function() {
    for (; this.sndArr.length > 0;) this.sndArr.pop().destroy()
}, Object.defineProperty(DeSnd.SndGroup.prototype, "volume", {
    get: function() {
        return this._volume
    },
    set: function(a) {
        if (a < 0 ? a = 0 : a > 10 && (a = 10), this._mute) this._muteVolume = a;
        else {
            this._volume = a;
            for (var b = 0; b < this.sndArr.length; b++) this.sndArr[b].updateVolume()
        }
    }
}), Object.defineProperty(DeSnd.SndGroup.prototype, "mute", {
    get: function() {
        return this._mute
    },
    set: function(a) {
        a = a || !1, this._mute !== a && this._doMute(a)
    }
}), DeSnd.SndGroup.prototype._doMute = function(a) {
    a ? (this._muteVolume = this.volume, this.volume = 0, this._mute = !0) : (this._mute = !1, this.volume = this._muteVolume)
}, DeSnd.Sound = function(a, b, c) {
    this._mngRef = a, this._groupRef = null, this.key = b, this.duration = 0, this._state = "", this._sndObject = null, this._context = null, this._sound = null, this._volume = 1, this._pan = 0, this._mute = !1, this._group = "", this._autoplay = !1, this._loop = !1, this._position = 0, this._inFade = !1, this._outFade = !1, this._fadeDuration = a.fadeDuration, this._delay = 0, this._detune = 0, this._rate = 1, this._muteVolume = 0, this._fadeVolume = 0, this._gainNode = null, this._duration = 0, this._startTime = 0, this._startTimer = null, this._fader = new DeSnd.Fader(this), this._callbacks = {}, this._init(c)
}, DeSnd.Sound.prototype._init = function(a) {
    this._mngRef.audioMode === DeSnd.MODE_WEB && (this._context = this._mngRef.context), this._sndObject = this._mngRef.loader.getSnd(this.key), this._sndObject.initProps && this._updateProps(this._sndObject.initProps), a && this._updateProps(a), this._sndObject.data ? this.state = DeSnd.SND_READY : (this.state = DeSnd.SND_LOADING, this._sndObject.waitList.push(this))
}, DeSnd.Sound.prototype._updateProps = function(a) {
    a = a || {}, this.group = a.group || this.group, this.volume = a.volume || this.volume, this.pan = a.pan || this.pan, this.mute = a.mute || this.mute, this.delay = a.delay || this.delay, this.detune = a.detune || this.detune, this.rate = a.rate || this.rate, this.autoplay = a.autoplay || this.autoplay, this.loop = a.loop || this.loop, this.inFade = a.inFade || this.inFade, this.outFade = a.outFade || this.outFade, this.fadeDuration = a.fadeDuration || this.fadeDuration, this.position = a.position || this.position
}, DeSnd.Sound.prototype._cacheReturn = function() {
    this._mngRef.tagCache.addItem(this._sound), this._sound = null
}, DeSnd.Sound.prototype.play = function() {
    var a = this;
    return this._delay > 0 ? this._startTimer = setTimeout(function() {
        a._doPlay()
    }, this._delay) : this._doPlay(), this
}, DeSnd.Sound.prototype._doPlay = function() {
    switch (this.state) {
        case DeSnd.SND_READY:
        case DeSnd.SND_PAUSED:
            this._startPlayback();
            break;
        case DeSnd.SND_COMPLETE:
            this._position = 0, this._startPlayback();
            break;
        case DeSnd.SND_LOADING:
            this.autoplay = !0
    }
}, DeSnd.Sound.prototype._startPlayback = function() {
    var a = this;
    this._mngRef.audioMode === DeSnd.MODE_WEB ? (this._sound = this._context.createBufferSource(), this._sound.buffer = this._sndObject.data, this._duration = this._sound.buffer.duration, this.duration = Math.floor(1e3 * this._duration), this._gainNode = this._context.createGain(), this._sound.connect(this._gainNode), this._gainNode.connect(this._mngRef.masterGain), this._startTime = this._context.currentTime - this._position, this._updateProps(), this._sound.onended = function() {
        a.state = DeSnd.SND_COMPLETE
    }, this._sound.start(0, this._position)) : (this._sound = this._mngRef.tagCache.getItem(this._sndObject.data), this._sound.duration && (this._getTagDuration(), this._sound.currentTime = this._position), this._updateProps(), this._sound.onended = function() {
        a.state = DeSnd.SND_COMPLETE, a._cacheReturn()
    }, this._sound.duration ? this._sound.play() : this._sound.oncanplay = function() {
        a._sound.oncanplay = null, a._getTagDuration(), a._sound.play()
    }), this._inFade && this._fader.fade(0, this._volume, this._fadeDuration), this.state = DeSnd.SND_PLAYING
}, DeSnd.Sound.prototype._getTagDuration = function() {
    this._duration = this._sound.duration, this.duration = Math.floor(1e3 * this._duration)
}, DeSnd.Sound.prototype._endPlayback = function(a) {
    switch (this._startTimer && clearTimeout(this._startTimer), this.state) {
        case DeSnd.SND_LOADING:
            this.autoplay = !1;
            break;
        case DeSnd.SND_PLAYING:
        case DeSnd.SND_PAUSED:
        case DeSnd.SND_COMPLETE:
            this._sound && (this._sound.onended = null, this._sound.oncanplay && (this._sound.oncanplay = null), this._mngRef.audioMode === DeSnd.MODE_WEB ? this._sound.stop() : (this._sound.pause(), this._sound.currentTime = 0, this._cacheReturn())), this.state = a
    }
}, DeSnd.Sound.prototype.pause = function() {
    this._fadeVolume = this.volume, this._outFade ? this._fader.fade(this._volume, 0, this._fadeDuration, this._doPause, this) : this._doPause()
}, DeSnd.Sound.prototype._doPause = function() {
    this._readPosition(), this._endPlayback(DeSnd.SND_PAUSED), this.volume = this._fadeVolume
}, DeSnd.Sound.prototype.stop = function() {
    this._fadeVolume = this.volume, this._outFade ? this._fader.fade(this._volume, 0, this._fadeDuration, this._doStop, this) : this._doStop()
}, DeSnd.Sound.prototype._doStop = function() {
    this._position = 0, this._endPlayback(DeSnd.SND_READY), this.volume = this._fadeVolume
}, DeSnd.Sound.prototype.fade = function(a, b, c) {
    this._fader.fade(a, b, c)
}, DeSnd.Sound.prototype.destroy = function() {
    this._fader.destroy(), this._fader = null, this._doStop(), this._mngRef.removeSound(this), this._mngRef = null, this._groupRef = null, this._sndObject = null, this._context = null, this._sound = null, this._callbacks = {}
}, Object.defineProperty(DeSnd.Sound.prototype, "state", {
    get: function() {
        return this._state
    },
    set: function(a) {
        if (this._state !== a) {
            switch (this._state = a, a) {
                case DeSnd.SND_READY:
                    this.autoplay && (this.autoplay = !1, this.play()), this.dispatchEvent(DeSnd.E_SND_READY);
                    break;
                case DeSnd.SND_ERROR:
                    this.dispatchEvent(DeSnd.E_SND_ERROR);
                    break;
                case DeSnd.SND_PLAYING:
                    this.dispatchEvent(DeSnd.E_SND_PLAY);
                    break;
                case DeSnd.SND_PAUSED:
                    this.dispatchEvent(DeSnd.E_SND_PAUSE);
                    break;
                case DeSnd.SND_COMPLETE:
                    this.dispatchEvent(DeSnd.E_SND_COMPLETE)
            }
            this.dispatchEvent(DeSnd.E_SND_STATE, {
                state: this._state
            })
        }
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "volume", {
    get: function() {
        return this._volume
    },
    set: function(a) {
        a < 0 ? a = 0 : a > 10 && (a = 10), this._mngRef.audioMode !== DeSnd.MODE_WEB && a > 1 && (a = 1), this._volume !== a && this.dispatchEvent(DeSnd.E_SND_VOLUME, {
            volume: this._volume
        }), this._volume = a, this._muteVolume = this._volume, !this._mute && this._sound && (this._mngRef.audioMode === DeSnd.MODE_WEB ? this._gainNode.gain.setValueAtTime(this._volume * this._groupRef.volume, this._context.currentTime) : this._sound.volume = this._volume * this._mngRef._masterVolume)
    }
}), DeSnd.Sound.prototype.updateVolume = function() {
    this.volume = this.volume
}, Object.defineProperty(DeSnd.Sound.prototype, "pan", {
    get: function() {
        return this._pan
    },
    set: function(a) {
        a < -1 ? a = -1 : a > 1 && (a = 1), this._pan !== a && (this._pan = a, this._sound && this.logger.showLog("Panning isn't yet implemented.", 0))
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "detune", {
    get: function() {
        return this._detune
    },
    set: function(a) {
        this._detune = a, this._mngRef.audioMode === DeSnd.MODE_WEB && this._sound && this._sound.detune && this._sound.detune.value !== this._detune && (this._sound.detune.value = this._detune)
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "rate", {
    get: function() {
        return this._rate
    },
    set: function(a) {
        this._rate = a, this._mngRef.audioMode === DeSnd.MODE_WEB && this._sound && this._sound.playbackRate && this._sound.playbackRate.value !== this._rate && (this._sound.playbackRate.value = this._rate)
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "mute", {
    get: function() {
        return this._mute
    },
    set: function(a) {
        a = a || !1, this._mute = a, this._doMute(this._mute), this.dispatchEvent(DeSnd.E_SND_MUTE, {
            mute: this._mute
        })
    }
}), DeSnd.Sound.prototype._doMute = function(a) {
    a ? (this._muteVolume = this._volume, this._sound && (this._mngRef.audioMode === DeSnd.MODE_WEB ? this._gainNode.gain.setValueAtTime(0, this._context.currentTime) : this._sound.volume = 0)) : this._sound && (this._mngRef.audioMode === DeSnd.MODE_WEB ? this._gainNode.gain.setValueAtTime(this._muteVolume * this._groupRef.volume, this._context.currentTime) : this._sound.volume = this._muteVolume * this._mngRef._masterVolume)
}, Object.defineProperty(DeSnd.Sound.prototype, "delay", {
    get: function() {
        return this._delay
    },
    set: function(a) {
        a = a || 0, a < 0 && (a = 0), this._delay = a
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "group", {
    get: function() {
        return this._group
    },
    set: function(a) {
        a = String(a) || "0", a.length < 1 && (a = 0), this._group !== a && (this._group = a, this._groupLeave(), this._groupJoin())
    }
}), DeSnd.Sound.prototype._groupLeave = function() {
    if (this._groupRef) {
        var a = this._groupRef.sndArr.indexOf(this); - 1 !== a && this._groupRef.sndArr.splice(a, 1)
    }
}, DeSnd.Sound.prototype._groupJoin = function() {
    this._mngRef._groups[this._group] || (this._mngRef._groups[this._group] = new DeSnd.SndGroup), this._groupRef = this._mngRef._groups[this._group], this._groupRef.sndArr.push(this), this.updateVolume()
}, Object.defineProperty(DeSnd.Sound.prototype, "autoplay", {
    get: function() {
        return this._autoplay
    },
    set: function(a) {
        a = a || !1, this._autoplay = a
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "loop", {
    get: function() {
        return this._loop
    },
    set: function(a) {
        a = a || !1, this._loop = a, this._sound && (this._sound.loop = this._loop)
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "inFade", {
    get: function() {
        return this._inFade
    },
    set: function(a) {
        a = a || !1, this._inFade = a
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "outFade", {
    get: function() {
        return this._outFade
    },
    set: function(a) {
        a = a || !1, this._outFade = a
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "fadeDuration", {
    get: function() {
        return this._fadeDuration
    },
    set: function(a) {
        a = a || this._mngRef.fadeDuration, a < 0 && (a = 100), this._fadeDuration = a
    }
}), Object.defineProperty(DeSnd.Sound.prototype, "position", {
    get: function() {
        return this._readPosition(), Math.floor(this._position % this._duration * 1e3) || 0
    },
    set: function(a) {
        a < 0 ? a = 0 : a > this.duration && (a = this.duration, this.logger.showLog("Cannot set position (" + a + ") > duration (" + this.duration + ")", 0)), a /= 1e3, this._duration > 0 && (a %= this._duration), this._readPosition(), this._position !== a && (this._position = a, this.state === DeSnd.SND_PLAYING && (this._mngRef.audioMode === DeSnd.MODE_WEB ? (this._endPlayback(DeSnd.SND_READY), this._startPlayback()) : this._sound.currentTime = this._position, this.dispatchEvent(DeSnd.E_SND_SEEK, {
            position: this._position
        })))
    }
}), DeSnd.Sound.prototype._readPosition = function() {
    this.state === DeSnd.SND_PLAYING && (this._mngRef.audioMode === DeSnd.MODE_WEB ? this._position = this._context.currentTime - this._startTime : this._position = this._sound.currentTime)
}, DeSnd.Sound.prototype.dispatchEvent = function(a, b) {
    if (this._callbacks[a] && this._callbacks[a].length > 0)
        for (var c = this._callbacks[a].length - 1; c >= 0; c--) this._callbacks[a][c].cFc.call(this._callbacks[a][c].cSc, b), this._callbacks[a][c] && this._callbacks[a][c].onc && this._callbacks[a].splice(c, 1)
}, DeSnd.Sound.prototype.once = function(a, b, c) {
    this.on(a, b, c, !0)
}, DeSnd.Sound.prototype.on = function(a, b, c, d) {
    this._callbacks[a] || (this._callbacks[a] = []), this._callbacks[a].push({
        cFc: b,
        cSc: c || this,
        onc: d || !1
    })
}, DeSnd.Sound.prototype.off = function(a, b) {
    if (this._callbacks[a] && this._callbacks[a].length > 0)
        if (b)
            for (var c = this._callbacks[a].length - 1; c >= 0; c--) this._callbacks[a][c].cFc === b && this._callbacks[a].splice(c, 1);
        else this._callbacks[a] = []
}, DeSnd.TagCache = function() {
    this._sndCache = []
}, DeSnd.TagCache.prototype.getItem = function(a) {
    for (var b = null, c = 0; c < this._sndCache.length; c++)
        if (this._sndCache[c].src === a) {
            b = this._sndCache.splice(c, 1)[0];
            break
        } return null == b && (b = new Audio(a)), b
}, DeSnd.TagCache.prototype.addItem = function(a) {
    null != a && this._sndCache.push(a)
}, DeSnd.TagCache.prototype.destroyCache = function() {
    for (; this._sndCache.length > 0;) {
        var a = this._sndCache.pop();
        a.src = "", a = null
    }
};
